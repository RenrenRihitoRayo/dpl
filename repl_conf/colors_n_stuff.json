{
    "classes": {
        "constants_bool": {
            "style": "italic fg:red",
            "words": [
                "true", "false"
            ]
        },
        "operations": {
            "style": "fg:cyan",
            "words": [
                "+", "-", "*", "/", "//", "**", "%",
                "..", "..+",
                "==", ">=", "<=", "!=", ">", "<", "=>",
                "typeof", "len", "slice",
                "?dict", "?list", "?string", "?int", "?float", "?bytes", 
                "dict", "!",
                "nil?", "def?", "none?",
                "in", "or", "and", "not",
                "checks", "follows", "satisfies",
                "median", "irange", "ireverse", "range", "reverse", "..", "..+",
                "dpercent", "to_ascii", "from_ascii", "eval", "oldformat",
                "head:body:tail", "head:body", "body:tail", "tail",
                "call", "call::static", "struct", "tuple"
            ]
        },
        "constants": {
            "style": "red",
            "words": [
                "...", "none", "nil",
                "infinity", "-infinity",
                ".unique", ".unique::static",
                ".dict", ".list", ".tuple"
            ]
        },
        "keywords": {
            "style": "bold fg:magenta",
            "words": [
                "end",
                "fn", "fn::static", "fn::inline", "method", "return",
                "match", "switch", "switch::static", "default", "case", "with",
                "string", "string::static", "dict", "list",
                "set", "setref", "fallthrough", "as",
                "fallthrough",
                "if", "ifmain", "then", "else",
                "check",
                "safe", "raise",
                "declare", "def",
                "for", "while", "loop",
                "on_new_scope", "on_pop_scope",
                "del", "enum",
                "object", "new", "make_cons", "inherit", "from",
                "stop", "skip", "begin", "benchmark",
                "START_TIME", "STOP_TIME", "LOG_TIME", "get_time"
            ]
        },
        "functions": {
            "style": "bold fg:grey",
            "words": [
                "cmd", "exit", "exec", "sexec",
                "dump_vars", "dump_scope",
                "inc", "dec"
            ]
        },
        "comments": {
            "style": "fg:yellow",
            "startswith": "#"
        },
        "runtime_directives": {
            "style": "underline fg:magenta",
            "words": [
                "use", "use:luaj"
            ]
        },
        "directives": {
            "style": "underline",
            "words": [
                "&use", "&use:luaj", "&use:c",
                "&include", "&enable", "&disable",
                "&import"
            ]
        },
        "numbers": {
            "style": "fg:orange",
            "match": "-?\\d+(: ?\\.\\d+)?"
        },
        "string": {
            "style": "fg:lightgreen",
            "match": "\"(\\\\.|[^\"\\\\]+)*?\""
        },
        "istring": {
            "style": "fg:lightgreen",
            "match": "'(\\\\.|[^'\\\\]+)*?'"
        },
        "bstring": {
            "style": "fg:lightgreen",
            "match": "\\{(\\\\.|[^}\\\\]+)*?\\}"
        },
        "err_string": {
            "style": "fg:lightgreen bg:red",
            "match": "(\\{|'|\").*?$"
        },
        "escape": {
            "style": "fg:purple"
        },
        "in:istring:interpolated": {
            "style": "fg:#c8ad7f",
            "match": "(\\$|&)\\{[^}]+\\}"
        },
        "in:string:escape": {
            "style": "underline fg:lightgreen",
            "match": "\\\\."
        },
        "in:istring:escape": {
            "style": "underline fg:lightgreen",
            "match": "\\\\."
        },
        "in:bstring:escape": {
            "style": "underline fg:lightgreen",
            "match": "\\\\."
        },
        "read": {
            "style": "fg:pink",
            "match": ":[\\w:._\\-\\d]+"
        },
        "calls": {
            "style": "fg:lightblue",
            "match": "^[\\w:._\\-\\d]+"
        }
    }
}
